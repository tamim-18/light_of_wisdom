"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrivateKey = exports.getSigningKey = exports.sign = void 0;
const jose_1 = require("jose");
const fs_1 = __importDefault(require("fs"));
const jwt_util_1 = require("../../util/jwt-util.js");
const crypto_1 = require("crypto");
function sign(payload, secretOrPrivateKey, options) {
    const sign = new jose_1.SignJWT({
        ...payload,
        ...(options.keyid ? { kid: options.keyid } : null),
    }).setProtectedHeader({ alg: options.algorithm || 'RS256' });
    if (options.issuer)
        sign.setIssuer(options.issuer);
    if (options.subject)
        sign.setSubject(options.subject);
    if (options.audience)
        sign.setAudience(options.audience);
    if (options.notBefore)
        sign.setNotBefore(options.notBefore);
    if (options.expiresIn)
        sign.setExpirationTime(options.expiresIn);
    return sign.sign(secretOrPrivateKey);
}
exports.sign = sign;
function getSigningKey(mux, opts) {
    const keyId = opts.keyId || mux.jwtSigningKey;
    if (!keyId) {
        throw new Error('Signing key required; pass a keyId option to mux.jwt.sign*(), a jwtSigningKey option to new Mux(), or set the MUX_SIGNING_KEY environment variable');
    }
    return keyId;
}
exports.getSigningKey = getSigningKey;
async function getPrivateKey(mux, opts) {
    const key = await getPrivateKeyHelper(mux, opts);
    if ((0, jwt_util_1.isKeyLike)(key))
        return key;
    return (0, crypto_1.createPrivateKey)(key);
}
exports.getPrivateKey = getPrivateKey;
async function getPrivateKeyHelper(mux, opts) {
    let key;
    if (opts.keySecret) {
        key = opts.keySecret;
    }
    else if (opts.keyFilePath) {
        key = await fs_1.default.promises.readFile(opts.keyFilePath, 'utf8');
    }
    else if (mux.jwtPrivateKey) {
        key = mux.jwtPrivateKey;
    }
    if (Buffer.isBuffer(key) || (0, jwt_util_1.isKeyLike)(key))
        return key;
    if (typeof key === 'string') {
        key = key.trim();
        if (key.startsWith('-----BEGIN')) {
            return key;
        }
        try {
            key = Buffer.from(key, 'base64').toString();
            if (key.startsWith('-----BEGIN')) {
                return key;
            }
        }
        catch (err) {
            // fallthrough
        }
        throw new TypeError(jwt_util_1.keyFormatErrorMessage);
    }
    throw new TypeError('Private key required; pass a keySecret or keyFilePath option to mux.jwt.sign*(), a jwtPrivateKey option to new Mux(), or set the MUX_PRIVATE_KEY environment variable');
}
//# sourceMappingURL=jwt-node.js.map