"use strict";
// File generated from our OpenAPI spec by Stainless.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningKeysBasePage = exports.SigningKeys = void 0;
const resource_1 = require("@mux/mux-node/resource");
const core_1 = require("@mux/mux-node/core");
const SigningKeysAPI = __importStar(require("@mux/mux-node/resources/system/signing-keys"));
const pagination_1 = require("@mux/mux-node/pagination");
class SigningKeys extends resource_1.APIResource {
    /**
     * Creates a new signing key pair. When creating a new signing key, the API will
     * generate a 2048-bit RSA key-pair and return the private key and a generated
     * key-id; the public key will be stored at Mux to validate signed tokens.
     */
    create(options) {
        return this._client.post('/system/v1/signing-keys', options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieves the details of a signing key that has previously been created. Supply
     * the unique signing key ID that was returned from your previous request, and Mux
     * will return the corresponding signing key information. **The private key is not
     * returned in this response.**
     */
    retrieve(signingKeyId, options) {
        return this._client.get(`/system/v1/signing-keys/${signingKeyId}`, options)._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/system/v1/signing-keys', SigningKeysBasePage, { query, ...options });
    }
    /**
     * Deletes an existing signing key. Use with caution, as this will invalidate any
     * existing signatures and no JWTs can be signed using the key again.
     */
    delete(signingKeyId, options) {
        return this._client.delete(`/system/v1/signing-keys/${signingKeyId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
}
exports.SigningKeys = SigningKeys;
class SigningKeysBasePage extends pagination_1.BasePage {
}
exports.SigningKeysBasePage = SigningKeysBasePage;
(function (SigningKeys) {
    SigningKeys.SigningKeysBasePage = SigningKeysAPI.SigningKeysBasePage;
})(SigningKeys = exports.SigningKeys || (exports.SigningKeys = {}));
//# sourceMappingURL=signing-keys.js.map