// File generated from our OpenAPI spec by Stainless.
import { APIResource } from '@mux/mux-node/resource';
import { isRequestOptions } from '@mux/mux-node/core';
import * as UploadsAPI from '@mux/mux-node/resources/video/uploads';
import { BasePage } from '@mux/mux-node/pagination';
export class Uploads extends APIResource {
    /**
     * Creates a new direct upload, through which video content can be uploaded for
     * ingest to Mux.
     */
    create(body, options) {
        return this._client.post('/video/v1/uploads', { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Fetches information about a single direct upload in the current environment.
     */
    retrieve(uploadId, options) {
        return this._client.get(`/video/v1/uploads/${uploadId}`, options)._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/video/v1/uploads', UploadsBasePage, { query, ...options });
    }
    /**
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes
     * after this request, no asset will be created. This request will only succeed if
     * the upload is still in the `waiting` state.
     */
    cancel(uploadId, options) {
        return this._client.put(`/video/v1/uploads/${uploadId}/cancel`, options)._thenUnwrap((obj) => obj.data);
    }
}
export class UploadsBasePage extends BasePage {
}
(function (Uploads) {
    Uploads.UploadsBasePage = UploadsAPI.UploadsBasePage;
})(Uploads || (Uploads = {}));
//# sourceMappingURL=uploads.mjs.map