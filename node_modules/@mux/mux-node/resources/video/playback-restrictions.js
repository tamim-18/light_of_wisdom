"use strict";
// File generated from our OpenAPI spec by Stainless.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaybackRestrictionsBasePage = exports.PlaybackRestrictions = void 0;
const resource_1 = require("@mux/mux-node/resource");
const core_1 = require("@mux/mux-node/core");
const PlaybackRestrictionsAPI = __importStar(require("@mux/mux-node/resources/video/playback-restrictions"));
const pagination_1 = require("@mux/mux-node/pagination");
class PlaybackRestrictions extends resource_1.APIResource {
    /**
     * Create a new Playback Restriction.
     */
    create(body, options) {
        return this._client.post('/video/v1/playback-restrictions', { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieves a Playback Restriction associated with the unique identifier.
     */
    retrieve(playbackRestrictionId, options) {
        return this._client.get(`/video/v1/playback-restrictions/${playbackRestrictionId}`, options)._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/video/v1/playback-restrictions', PlaybackRestrictionsBasePage, {
            query,
            ...options,
        });
    }
    /**
     * Deletes a single Playback Restriction.
     */
    delete(playbackRestrictionId, options) {
        return this._client.delete(`/video/v1/playback-restrictions/${playbackRestrictionId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Allows you to modify the list of domains or change how Mux validates playback
     * requests without the `Referer` HTTP header. The Referrer restriction fully
     * replaces the old list with this new list of domains.
     */
    updateReferrer(playbackRestrictionId, body, options) {
        return this._client.put(`/video/v1/playback-restrictions/${playbackRestrictionId}/referrer`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.data);
    }
}
exports.PlaybackRestrictions = PlaybackRestrictions;
class PlaybackRestrictionsBasePage extends pagination_1.BasePage {
}
exports.PlaybackRestrictionsBasePage = PlaybackRestrictionsBasePage;
(function (PlaybackRestrictions) {
    PlaybackRestrictions.PlaybackRestrictionsBasePage = PlaybackRestrictionsAPI.PlaybackRestrictionsBasePage;
})(PlaybackRestrictions = exports.PlaybackRestrictions || (exports.PlaybackRestrictions = {}));
//# sourceMappingURL=playback-restrictions.js.map