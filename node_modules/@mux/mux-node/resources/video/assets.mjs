// File generated from our OpenAPI spec by Stainless.
import { APIResource } from '@mux/mux-node/resource';
import { isRequestOptions } from '@mux/mux-node/core';
import * as AssetsAPI from '@mux/mux-node/resources/video/assets';
import { BasePage } from '@mux/mux-node/pagination';
export class Assets extends APIResource {
    /**
     * Create a new Mux Video asset.
     */
    create(body, options) {
        return this._client.post('/video/v1/assets', { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieves the details of an asset that has previously been created. Supply the
     * unique asset ID that was returned from your previous request, and Mux will
     * return the corresponding asset information. The same information is returned
     * when creating an asset.
     */
    retrieve(assetId, options) {
        return this._client.get(`/video/v1/assets/${assetId}`, options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Updates the details of an already-created Asset with the provided Asset ID. This
     * currently supports only the `passthrough` field.
     */
    update(assetId, body, options) {
        return this._client.patch(`/video/v1/assets/${assetId}`, { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/video/v1/assets', AssetsBasePage, { query, ...options });
    }
    /**
     * Deletes a video asset and all its data.
     */
    delete(assetId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Creates a playback ID that can be used to stream the asset to a viewer.
     */
    createPlaybackId(assetId, body, options) {
        return this._client.post(`/video/v1/assets/${assetId}/playback-ids`, { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Adds an asset track (for example, subtitles, or an alternate audio track) to an
     * asset.
     */
    createTrack(assetId, body, options) {
        return this._client.post(`/video/v1/assets/${assetId}/tracks`, { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Deletes a playback ID, rendering it nonfunctional for viewing an asset's video
     * content. Please note that deleting the playback ID removes access to the
     * underlying asset; a viewer who started playback before the playback ID was
     * deleted may be able to watch the entire video for a limited duration.
     */
    deletePlaybackId(assetId, playbackId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}/playback-ids/${playbackId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Removes a text track from an asset. Audio and video tracks on assets cannot be
     * removed.
     */
    deleteTrack(assetId, trackId, options) {
        return this._client.delete(`/video/v1/assets/${assetId}/tracks/${trackId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Returns a list of the input objects that were used to create the asset along
     * with any settings that were applied to each input.
     */
    retrieveInputInfo(assetId, options) {
        return this._client.get(`/video/v1/assets/${assetId}/input-info`, options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieves information about the specified playback ID.
     */
    retrievePlaybackId(assetId, playbackId, options) {
        return this._client.get(`/video/v1/assets/${assetId}/playback-ids/${playbackId}`, options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Allows you to add temporary access to the master (highest-quality) version of
     * the asset in MP4 format. A URL will be created that can be used to download the
     * master version for 24 hours. After 24 hours Master Access will revert to "none".
     * This master version is not optimized for web and not meant to be streamed, only
     * downloaded for purposes like archiving or editing the video offline.
     */
    updateMasterAccess(assetId, body, options) {
        return this._client.put(`/video/v1/assets/${assetId}/master-access`, { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Allows you to add or remove mp4 support for assets that were created without it.
     * Currently there are two values supported in this request, `standard` and `none`.
     * `none` means that an asset _does not_ have mp4 support, so submitting a request
     * with `mp4_support` set to `none` will delete the mp4 assets from the asset in
     * question.
     */
    updateMP4Support(assetId, body, options) {
        return this._client.put(`/video/v1/assets/${assetId}/mp4-support`, { body, ...options })._thenUnwrap((obj) => obj.data);
    }
}
export class AssetsBasePage extends BasePage {
}
(function (Assets) {
    Assets.AssetsBasePage = AssetsAPI.AssetsBasePage;
})(Assets || (Assets = {}));
//# sourceMappingURL=assets.mjs.map